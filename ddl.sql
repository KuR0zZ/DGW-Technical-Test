CREATE TABLE Users (
	id SERIAL PRIMARY KEY,
	username VARCHAR NOT NULL,
	email VARCHAR NOT NULL UNIQUE,
	password TEXT NOT NULL,
	role VARCHAR NOT NULL,
	created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Books (
	id SERIAL PRIMARY KEY,
	name VARCHAR NOT NULL,
	genre VARCHAR NOT NULL,
	author VARCHAR NOT NULL,
	published_date VARCHAR NOT NULL,
	stock INT NOT NULL,
	price DECIMAL(10, 2) NOT NULL,
	created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Rents (
	id SERIAL PRIMARY KEY,
	user_id INT REFERENCES Users(id) NOT NULL,
	book_id INT REFERENCES Books(id) NOT NULL,
	total_price DECIMAL(10, 2) NOT NULL,
	start_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
	end_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP + INTERVAL '7 days')
);

CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_modtime
BEFORE UPDATE ON Users
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();


CREATE TRIGGER update_book_modtime
BEFORE UPDATE ON Books
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();